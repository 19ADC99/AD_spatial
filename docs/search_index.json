[["index.html", "Alzhaimer’s disease - A gentle introduction to spatial transcriptomics Abstract", " Alzhaimer’s disease - A gentle introduction to spatial transcriptomics Andrea Del Cortona1 2024-08-15 Abstract Human middle temporal gyrus (MTG) is a vulnerable brain region in early Alzheimer’s disease (AD)[^1], but little is known about the molecular mechanisms underlying this regional vulnerability. Here we utilize the 10 × Visium platform to define the spatial transcriptomic profile in both AD and control (CT) MTG. We identify unique marker genes for cortical layers and the white matter, and layer-specific differentially expressed genes (DEGs) in human AD compared to CT. Deconvolution of the Visium spots showcases the significant difference in particular cell types among cortical layers and the white matter. Gene co-expression analyses reveal eight gene modules, four of which have significantly altered co-expression patterns in the presence of AD pathology. Adult human brain. [^1] figure source: https://github.com/linnarsson-lab/adult-human-brain andrea.delcortona@gmail.com↩︎ "],["import-slides-exploration-and-merge.html", "Chapter 1 Import Slides, Exploration and Merge 1.1 Import the first Slide 1.2 Import all Slides and Merge", " Chapter 1 Import Slides, Exploration and Merge 1.1 Import the first Slide The study by Chen et al. 2022 provides a dataset of spatial transcriptomics data from the human middle temporal gyrus (MTG), an area vulnerable to Alzhaimer’s Disease. The study contains six slides, 3 from AD patients and 3 from healthy controls. The slides have been sequenced using 10X Genomics Visium technology and the raw data is available at the GEO accession number GSE220442. We have decided to retrieve the data from the ssREAD database. We will first import one slide to explore its content. Let’s check the content ST01101 ## An object of class Seurat ## 36601 features across 4701 samples within 1 assay ## Active assay: Spatial (36601 features, 2000 variable features) ## 3 layers present: counts, data, scale.data ## 2 dimensional reductions calculated: pca, umap ## 1 image present: slice1 Very well, we have an object of class Seurat containing the spatial transcriptomics data of the first slide. The object contains expression data from 36,601 genes across 4701 spots. Let’s plot the expression of the genes next to the gene counts for each voxel in the slide. plot1 = Seurat::VlnPlot(ST01101, features = c(&quot;nCount_Spatial&quot;)) + NoLegend() plot2 = Seurat::SpatialFeaturePlot(ST01101, features = &quot;nCount_Spatial&quot;, pt.size.factor = 0) plot3 = Seurat::SpatialFeaturePlot(ST01101, features = &quot;nCount_Spatial&quot;, pt.size.factor = 2000) patchwork::wrap_plots(plot1, patchwork::wrap_plots(plot2, plot3, ncol = 1), ncol = 2) Figure 1.1: Slide ST01101 overview 1.2 Import all Slides and Merge Now that we are familiar with the content of the first slide, let’s import them in batch and merge them into a single Seurat object. First, we import the slides into the list ST011_list. Each slide is also transfermed using the Seurat::SCTransform function. Since the images attached to each sample have all the same name, we also make sure that we change the orig.ident of each slide so that the images are not overwritten when we merge the slides together. Then, we merge the slides into a single Seurat object ST011 and set the variable features to the union of the variable features of the individual slides. ## Warning: Some cell names are duplicated across objects provided. Renaming to ## enforce unique cell names. ## Warning: Key &#39;slice1_&#39; taken, using &#39;slice12_&#39; instead ## Warning: Key &#39;slice1_&#39; taken, using &#39;slice13_&#39; instead ## Warning: Key &#39;slice1_&#39; taken, using &#39;slice14_&#39; instead ## Warning: Key &#39;slice1_&#39; taken, using &#39;slice15_&#39; instead ## Warning: Key &#39;slice1_&#39; taken, using &#39;slice16_&#39; instead ## used (Mb) gc trigger (Mb) max used (Mb) ## Ncells 8193308 437.6 12129994 647.9 12129994 647.9 ## Vcells 1242984455 9483.3 1817989480 13870.2 1735680646 13242.2 ST011 ## An object of class Seurat ## 59009 features across 25293 samples within 2 assays ## Active assay: SCT (22408 features, 18000 variable features) ## 3 layers present: counts, data, scale.data ## 1 other assay present: Spatial ## 6 images present: control1, control2, control3, AD1, AD2, AD3 We can now plot the expression across clusters splitted by slide. # expression QC Seurat::VlnPlot(ST011, features = c(&quot;nCount_Spatial&quot;), split.by = &quot;orig.ident&quot;) + scale_fill_manual(values = c(&quot;indianred&quot;, &quot;brown2&quot;, &quot;firebrick&quot;, &quot;#BCD2EE&quot;, &quot;lightskyblue3&quot;, &quot;dodgerblue&quot;)) + ggplot2::theme(legend.position = c(0.9, 0.9)) Figure 1.2: Merged slides overview - Violin Plot We can immediatly notice how the control group have an higher cell counts and expression values for group 2 and 5, while the AD slides seems encriched in cells from group 9. Group 11 appear only in an AD slide. Let’s check as well how the gene counts are distributed across the six slides. # expression QC plot1 = Seurat::SpatialFeaturePlot(ST011, features = &quot;nCount_Spatial&quot;, pt.size.factor = 0) plot2 = Seurat::SpatialFeaturePlot(ST011, features = &quot;nCount_Spatial&quot;, pt.size.factor = 2000) patchwork::wrap_plots(plot1, plot2, ncol = 1) Figure 1.3: Merged slides overview - Slides expression Now we have a single Seurat object ST011 containing all the slides. We can proceed with the Dimensionality Reduction steps. "],["dimensionality-reduction-and-exploration-of-the-merged-slides.html", "Chapter 2 Dimensionality Reduction and Exploration of the Merged Slides 2.1 Dimensionality Reduction 2.2 Identification of Spatially Variable Genes across groups", " Chapter 2 Dimensionality Reduction and Exploration of the Merged Slides 2.1 Dimensionality Reduction Let’s run PCA and UMAP on the merged slides to explore the data structure and relationships between the mapped voxels. ## Warning in PrepDR(object = object, features = features, verbose = verbose): The ## following 6095 features requested have not been scaled (running reduction ## without them): APLNR, RELN, ACKR1, S100A8, AQP1, SFRP2, TIMP1, MT-ND1, S100A9, ## AL031056.1, MGP, CAPS, AEBP1, NDRG1, TJP2, TNFRSF6B, CD44, ERMN, SNORC, MT-ND2, ## ADAMTS4, HAMP, CDK2AP1, PLLP, DAAM2, CD99, NKX6-2, LAMP2, CD9, NTRK2, TMEM144, ## CNTN2, SEMA3B, SNRPN, NEFH, F3, RASL12, CRLF1, CD14, SLC7A2, MSX1, BOK, ## ZCCHC24, PLIN1, NECAB1, ITGB4, TAGLN2, ABCA2, IGFBP4, SUN2, FAM107B, LINC01094, ## PLEC, ENPP2, GADD45A, STOM, SMAD9, TTYH2, KIAA0930, RPLP0, CD81, VWA1, SOX8, ## ZFP36, AATK, MYRF, TSC22D1, CARNS1, BAG3, CLIC1, RDX, KCNMB4, TM4SF1, FCGR3A, ## PRNP, RPL36, IL1RL1, NR2F2, SNHG5, MAP4, IFI16, FPR1, FYB1, RPL36A, SLC6A8, ## ZBTB20, TYROBP, SOX10, PLTP, BEX3, RPS2, CLIC4, PFKFB2, B3GAT2, C1orf198, ## RAMP3, FGFR2, KIT, ACTG1, NORAD, YBX3, HSPB8, CEBPD, EEF1G, PRDX6, FAM181B, ## HYAL2, EEF1B2, FGF2, RPL8, SLAIN1, NCAN, ALDH6A1, HSPA8, SLC2A5, GSTM5, SEMA4D, ## PFKFB3, CDKN1C, ENTPD2, GPR37, APP, AP2M1, TSPO, ANLN, H3F3B, MOG, ARRDC4, ## GNAI2, MT1A, SLCO4A1, FADS2, ARHGAP5, SLC22A17, TPI1, RFX4, PACS2, NAMPT, PI16, ## APOC2, C1orf122, SNHG8, SLC11A1, RPL27A, RHOC, HINT1, SLC16A9, MTRNR2L1, ## SEPTIN2, GADD45B, TMIGD3, SIRT2, OTOS, EDN1, SCRG1, ADARB2, LRRC32, ENHO, ## PHYHD1, GOLGA7, C1orf61, EVI2A, UBC, TIMP2, RIDA, FBLN1, KIF5C, DEPP1, COX4I1, ## SOX18, ITPK1, CCL2, RPS10, GDI1, MYL12A, SNHG25, SYP, IER3, APOLD1, AIF1, ## THBS1, PLCD3, FCGR1A, SLC44A2, ADGRV1, RPL3, IFITM1, FBXO2, RAMP2, SPON1, RHOU, ## NOTCH3, SSR4, S100A13, TRIM47, TMED10, PRKCSH, CDC42EP1, DST, DDAH2, MTUS1, ## PAX6, COTL1, SLCO1A2, ITGB1, HADHB, MLLT11, PFDN5, PLD3, LINC00320, COX6C, ## ASCL1, VAMP2, SLC38A5, GSTP1, CFL2, GOT1, GLUD1, FADS1, FEZ1, FCER1G, MAP1A, ## RAB6B, NOTCH2, KCTD12, MT-ND4, BGN, ECH1, MT1H, DPYSL3, SERF2, RFTN2, RPL18, ## RHOA, EEF1A2, GNAL, GNG11, TMBIM6, LGALS3BP, CDK18, S100A1, CRIP1, CNDP1, UGT8, ## SELENOW, RORB, PI4KA, RPL31, HADHA, ASPHD1, OFD1, CEBPB, EMP3, ANXA6, ATP6V1E1, ## PLEKHH1, SHISA6, ADIPOR2, IFI27L2, PVALB, NUCKS1, SNHG29, CDC42EP4, CAPN3, ## HES6, LY86, NFIX, SCIN, TMEM47, SLC9A3R2, ITPR2, MRVI1, COMT, SLC48A1, NFIB, ## DLX6-AS1, ACSL1, PRR18, SERINC1, FAM89A, CCNI, EMX2OS, MAPK8IP1, PLAAT4, ## HDAC11, CTSD, LITAF, DNAJB2, ANXA2, MIDN, CALY, PRRX1, CEND1, TMC6, RAB31, ## RHBDD2, ALDH2, SEMA6A, NOP53, FMNL2, JUND, CDKN1A, UQCRH, PCSK1N, VIP, GMPR, ## PAQR8, IRF2BP2, ROMO1, CA2, TUBB4A, RAPGEF4, ITM2C, VSIG4, CD63, SEPTIN7, ## EMC10, EMP1, ZNF358, SCN1B, RGS12, PODXL, FAM167A, ATP5F1B, CPLX3, STARD7, ## FIS1, PDLIM1, TNFRSF1A, S100A16, ALCAM, IFI30, CADM4, HNRNPH1, ZFAS1, PPP1R1B, ## CFL1, ADCYAP1R1, UNC5B, MS4A6A, PENK, SYNGR2, RNF130, OLMALINC, OAF, CYBRD1, ## NWD1, LINC01411, DNM2, CRTAP, MXI1, MXRA8, NEBL, SERPINH1, IL6ST, RAMP1, PRDX1, ## NME2, PPIB, TMEM219, CAVIN1, ITGB2, HHATL, CIRBP, SLC3A2, TMEM165, GLS, DHCR24, ## EPDR1, SLC20A2, RPL10A, CSF1, ALDH1A1, CAMKK1, LINC01578, TP53BP2, NDFIP1, ## H2AFJ, PPP1R3C, CD151, LRRC8A, DDR2, MFSD2A, ST13, ANXA5, WASHC1, KCNE4, ## SPTAN1, MGLL, MTCH1, PMVK, FAT1, FSCN1, ATP6V0E1, MOAP1, SYT4, HSPA5, EIF4B, ## MYO6, SERBP1, PFN2, SAMHD1, NPTX2, PNRC1, SSPN, ICAM2, RPL27, POLR2F, PPFIA2, ## AC009041.2, HES1, FLNA, CP, PIRT, GPT2, ANXA1, RHOB, ALOX5AP, PNP, IGFBP3, ## NGEF, TTLL7, NAT8L, COX6A1, ALDH9A1, NFIC, PRKACB, DCTN1, SKP1, RPL23, FAIM2, ## SAT1, OGFRL1, PJA2, ATP6V0E2, MSI2, NUDT4, FA2H, PECAM1, EIF4A1, SAP18, CAVIN2, ## KRTCAP2, INSIG1, TECR, ADAMTS9, OAZ1, SARAF, APCDD1, SNTB1, RPL7, ELOVL5, ## SELENOK, TMEM63A, FIBIN, MTHFD2, SPI1, HMG20B, EIF4EBP2, SEPTIN8, PNISR, ACOT7, ## DCLK1, PHLDA3, ARGLU1, FUS, CAMK2D, UBL3, PREX2, SNTA1, ARHGAP21, VAMP3, NME4, ## SAMD4B, HSPD1, KAT2B, NUDT3, SERPINB6, CD163, CLIP2, FGD5-AS1, HNRNPA3, GPI, ## APBB1, SH3BGRL3, CLK1, DDIT4, DPP6, RALY, UHMK1, RELL1, PLIN3, UBAC1, ZNRF3, ## MPST, UBA52, RNF141, SORBS1, DNM3, AK1, DPP7, PDE4B, LTBP3, ARL2, RAB5B, AMFR, ## SOD1, FCGR2A, LUC7L3, ADCY8, SNHG32, FAM189A2, ELOVL1, MICOS13, DNAJB1, GTF3C6, ## HAPLN2, PCDH9, OCIAD1, GABRA1, ATP5IF1, STX1A, FYN, ARHGEF26, PDLIM4, ETFB, ## B4GAT1, CX3CR1, MCL1, COL16A1, ADCY2, SET, CTNNA1, KIF5A, PPP2R5C, CHST3, NME3, ## LAPTM4A, BEX2, SEC11C, DNAJC6, SNHG9, NEDD8, RCAN2, RUFY3, NRN1, CTSH, NDUFAF8, ## RPH3A, TOB2, LHX2, RAC1, NACA, HSPE1, ATP5F1E, SEC62, LMO2, SOCS3, ZNF536, ## FNBP1, RTF2, MAP2, CDC42BPA, SOWAHA, HLA-DQB1, FAXDC2, HIF1A, HEPN1, AP2S1, ## C4orf48, ZNF428, TIMM13, RPS6KA2, PITPNC1, CPLX1, ARL8A, PIM1, CD99L2, MAF1, ## MIF, CCT7, GABRD, NOTCH1, RPS17, LARP7, LINC01896, CTNND2, ATP5MD, RTL8C, ## PRKCA, SBF1, GAS7, PICALM, SPCS2, USF2, KIAA0408, KANK1, APC2, MARCKS, RPL35A, ## CALR, VAT1L, HMGB1, PTPN11, WLS, SLC7A5, ARPC1B, EDF1, NAP1L4, NUAK1, SCLT1, ## KPNB1, RASSF4, DAD1, AC068308.1, ARL6IP4, LCAT, PDZD2, RAB40B, SORBS3, MN1, ## RAB11B, DYNC1H1, WASF1, PHACTR3, VEGFB, PRKCE, MACF1, AC245060.5, DAZAP2, ## SPTLC2, GNG3, GAREM2, BACE1, EMID1, HNRNPF, PAK1, C12orf57, NDUFS7, ANK2, ## MAPKAPK2, LIMK2, HSP90B1, RPL7A, CNTFR, NDUFAF3, MIAT, SLC25A48, OSBPL1A, ## BMPR1B, B3GAT1, GABARAPL1, RAB3A, DDX3X, HDDC2, ZBTB16, SP1, SCG2, POLR2J, ## BRK1, POLR2L, TRIM28, PCBP4, KLF13, TRIM22, RHOQ, DCXR, COPS9, COX16, FGFRL1, ## HNRNPC, PGAM2, TLN1, LANCL1, LINC01354, YJEFN3, SELENOM, SEC61A1, ATRX, BRD7, ## ZNHIT1, STK11, UBE2H, MPHOSPH8, GRN, SPX, TPP1, PLEKHA1, BSCL2, CD300A, PUF60, ## GAS5, PIN1, DOHH, TCEAL3, LGI4, TYMP, S100A4, DDAH1, RPL15, BCAP31, PPP2CB, ## RPL24, DYNLL2, GPC4, ATP6AP2, PDLIM3, MBD3, TPD52, TAF10, COX7C, SERINC3, ## CTDSP1, DYSF, ICAM1, MOB1B, YWHAQ, INF2, RPL5, STUB1, BMP7, MSRB2, RGR, STAB1, ## THRA, DDT, SERPINA1, MSMO1, MZT2B, JAM3, HNRNPM, APC, SLC39A12, TCEAL7, PEX5L, ## GPBP1, SLC6A12, NGRN, NDUFB8, TALDO1, MMP24OS, PEA15, FAM50A, MAPK8IP3, ## ATP5F1A, KIF1A, HNRNPA1, CERS2, RBM39, WDR13, FKBP8, MYL6, MYH9, USP53, ## C1orf162, GRHPR, ZBTB47, HDGFL3, SLC25A23, NDUFS2, AZGP1, PCDHB4, RAPGEF3, ## HNRNPUL1, MPPED1, CDK14, WDR6, MAZ, MOB1A, MORF4L2, EPS15, RIN2, RAP1GDS1, ## MZT2A, GPR4, VPS51, MAST3, GAMT, BLOC1S1, NPTXR, GOLGA4, MICOS10, OST4, RPS26, ## SEC11A, LSAMP, RPL6, MPRIP, BMERB1, SNRNP70, MAP7D1, SYT11, PSMD4, PHC2, FAM3C, ## NDUFC2, ZFHX4, ACSS1, SLC18B1, INA, PALM, PRPF38B, PDE8B, HIPK1, APBA2, NBL1, ## GRIA2, MT-ND3, C4orf3, DENND2A, ENSA, ATF4, AGAP3, PSMB5, TMEM151A, PLEKHG3, ## HIGD1A, INSR, CHMP2A, CCDC124, CDK5R1, LDHB, ARRDC2, LMNA, SLC7A11, RNF11, ## RAB8A, NXN, UFC1, PRKCZ, HMOX1, EIF3G, LDHA, BRI3, ARHGDIA, ACBD7, ELAVL3, ## KLHL2, HES4, SERPING1, SELENON, TNS2, EGFL7, MGST3, WWTR1, CASC3, ENO1, MTMR10, ## SMYD2, MEGF9, LPCAT2, DYNLRB1, SDF2L1, SCARA3, IDI1, TACC1, FKBP5, COL4A1, ## POLR2E, ILF3, FKBP4, RPS7, COX5B, FAM102A, PLSCR4, NDUFS6, RHBDF2, ATP6V1A, ## SCN3B, EEF2, CAST, TAOK1, ATP6V1H, IPCEF1, SIPA1, TRIP6, EIF3A, SRARP, DIPK2B, ## ATP5MPL, EGLN3, WDR1, ANKH, MAT2A, NSG2, CPNE3, SFPQ, ARID5A, ATP2B2, TOMM20, ## TNS3, TRIL, GRSF1, EPB41L3, GHITM, MBOAT2, TMEM147, MTSS2, COX7A2, PPIF, CD59, ## YPEL3, CMTM6, FERMT2, TNFRSF1B, MS4A4A, HSPH1, SDF4, CD4, SYNM, BEX4, SNX6, ## SYPL1, SPTBN1, ARL6IP1, TLE5, LAMTOR4, EIF3K, NHP2, RMDN3, RAB11FIP4, STMN3, ## DDB1, TIPARP, GDE1, SCG3, MT-CYB, P2RY1, TMCO1, TM4SF18, PPP2R1A, ESAM, CALD1, ## ACAA2, PDGFRA, TCEAL4, BAG1, CERS1, TYRO3, LINC01088, HIP1, PDIA4, SRSF3, GEM, ## PAIP2, BRD2, SZRD1, COX7A1, STEAP3, PDXK, RO60, TMEFF2, SSBP3, CSDE1, BCL7C, ## TNXB, STAT3, USP22, SFXN5, SECISBP2L, DHRS3, ARNT2, MXD4, GDA, WFS1, H2AFZ, ## RAB21, RAB5A, PYGL, CDK2AP2, RBPJ, GPC1, HP1BP3, RBFOX1, KDELR2, CNTNAP2, TPM3, ## ROCK1, DRAP1, CYB5R3, PNMA8A, GLTP, UBXN4, TGFBR2, MCRIP1, ITGB1BP1, RTKN, ## SNX5, KIF3C, HNRNPUL2, GNG2, CXXC5, CAP1, CCDC50, PLEKHB2, HNMT, LIMS1, ZNF652, ## TOMM7, PNCK, CSNK1A1, ATP5MC2, AKAP8L, PGK1, CD68, CA11, PCNP, EPN2, PRUNE2, ## PLXNB2, ZFR, TMEM94, MLLT6, C18orf32, EML3, AASS, HAGH, TNS1, TOLLIP, GGT5, ## PDP1, KIDINS220, CD24, RAD23A, HEPH, ATP13A4, TGIF1, ZNF106, ELOB, IFI6, IDH3A, ## MAPK1, AARS, SELENOF, SEC61B, ERBB2, STAG2, SULT4A1, KCNN3, DMTN, TPD52L2, ## PRMT2, LCP1, RBM5, APOL6, EPHB6, RYR1, RARRES2, BTBD3, PKIG, UBE2M, HIF3A, ## ENOPH1, ATP9A, RBMS2, CHPT1, HMGN1, HCST, DHCR7, CAMK2G, SELENBP1, MAPK10, ## HCLS1, PCMT1, ALPL, RAB5C, HLA-DMA, GPR137B, EHD2, MRTFB, PPDPF, TKT, GLG1, ## P4HB, HNRNPL, PSEN1, ANP32A, PRKAR1A, CAPG, BDH2, ATP6V0B, NAP1L1, SNHG14, ## NAV1, SEZ6L2, SRRM2, ARHGEF4, SGTA, SSR3, GABARAP, ALKBH7, SBDS, GPAA1, SV2A, ## FLOT1, HNRNPK, KLK6, PARP1, VCP, HAPLN4, CTTN, PAICS, LIPA, AXL, ZNF24, TUBG2, ## ALKBH5, LSM14A, TMEM178A, HOMER3, JTB ## PC_ 1 ## Positive: MBP, PLP1, GFAP, CRYAB, CNP, SPP1, MOBP, DBNDD2, FTH1, TF ## PTGDS, S100B, LINC00844, SCD, PPP1R14A, CLDND1, RPS12, SELENOP, QDPR, MAG ## SEPTIN4, CLDN11, BCAS1, PTMA, FTL, APOD, PLEKHB1, EEF1A1, PAQR6, RPL37A ## Negative: SNAP25, ENC1, NRGN, UCHL1, CHN1, VSNL1, TMSB10, TUBA1B, CALM3, RTN1 ## SYT1, CALM1, SLC17A7, YWHAH, GNAS, NEFL, OLFM1, THY1, MAP1B, DNM1 ## RTN3, CCK, GPM6A, HSP90AB1, TUBB2A, TSPAN7, STMN2, ENO2, BASP1, YWHAG ## PC_ 2 ## Positive: MBP, PLP1, SNAP25, TMSB10, DBNDD2, TUBA1B, CNP, QDPR, UCHL1, MOBP ## STMN1, RTN1, RTN3, TF, FTH1, SYT1, CLDND1, CRYAB, MAP1B, CALM2 ## SEPTIN4, PPIA, MAG, PPP1R14A, APLP1, CLDN11, ENC1, THY1, VSNL1, BCAS1 ## Negative: MT-ND5, MTRNR2L12, MT-CO1, MTRNR2L8, SLC1A2, MT-ATP6, CST3, GLUL, MT-CO2, MT-ND4L ## MT-CO3, MALAT1, MT-ATP8, SLC1A3, MT3, MT2A, AQP4, VIM, MT1E, GJA1 ## CPE, FAM107A, CLU, ATP1A2, CXCL14, MT1G, MT1M, AGT, MTRNR2L10, AHCYL1 ## PC_ 3 ## Positive: MBP, MT-CO1, MT-CO3, MTRNR2L12, MT-ATP6, MT-CO2, MT-ND5, MTRNR2L8, MT-ND4L, MT-ATP8 ## HBB, HBA2, LINC00632, BCAS1, HBA1, MTRNR2L10, MOBP, MT-ND6, AL627171.2, MTURN ## HIPK2, PAQR6, RPS21, RPL37, RPL37A, SNHG6, MAN1A2, RPS12, KIF1C, TP53INP2 ## Negative: CLU, SPARCL1, CPE, SLC1A2, PTGDS, GLUL, AQP4, CST3, SLC1A3, APOE ## GJA1, AGT, PSAP, GAPDH, CKB, ITM2B, ENC1, VIM, SERPINA3, CRYAB ## ATP1A2, PLPP3, DKK3, GFAP, GSN, ACTB, ATP1B2, GPRC5B, MT3, DPYSL2 ## PC_ 4 ## Positive: MBP, PLP1, SLC1A2, GJA1, MOBP, GLUL, CNP, PTGDS, SLC1A3, MAG ## SEPTIN4, PLPP3, ATP1A2, TF, TTYH1, GPR37L1, BCAS1, DBNDD2, ATP1B2, CLU ## GJB6, OPALIN, HTRA1, SCD, MT-ATP6, CPE, HSPA2, ETNPPL, AGT, MT-CO1 ## Negative: HBB, HBA2, HBA1, TMSB10, TMSB4X, CD74, B2M, EEF1A1, CLDN5, A2M ## TPT1, TAGLN, C1QB, HLA-B, RPLP1, SPP1, RPL41, HLA-DRA, C1QC, MYL9 ## GFAP, IFI27, FTL, C1QA, HLA-E, SRGN, RPS27, VWF, ACTB, SPARC ## PC_ 5 ## Positive: TMSB4X, MTRNR2L12, SPP1, MT-ND5, RPL41, EEF1A1, CD74, RPL37A, RPLP1, TMSB10 ## RPS27, FTL, MTRNR2L8, RPL34, RPL37, FTH1, C1QB, C1QC, GFAP, MT-CO1 ## RPS21, TPT1, RPS24, RPS28, RPL26, MT-CO3, RPS18, MT-CO2, RPL38, HLA-DRA ## Negative: HBB, HBA2, HBA1, MBP, SLC1A2, PLP1, GJA1, SLC1A3, MALAT1, PTGDS ## ATP1A2, PLPP3, GLUL, ATP1B2, FGFR3, AGT, CLU, AQP4, GJB6, CPE ## MOBP, GPR37L1, CNP, CLDN10, GPX3, TTYH1, SNCG, LRIG1, HTRA1, PBXIP1 ## Computing nearest neighbor graph ## Computing SNN ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 25293 ## Number of edges: 790692 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8242 ## Number of communities: 12 ## Elapsed time: 4 seconds ## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric ## To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; ## This message will be shown once per session ## 13:28:45 UMAP embedding parameters a = 0.9922 b = 1.112 ## 13:28:45 Read 25293 rows and found 30 numeric columns ## 13:28:45 Using Annoy for neighbor search, n_neighbors = 30 ## 13:28:45 Building Annoy index with metric = cosine, n_trees = 50 ## 0% 10 20 30 40 50 60 70 80 90 100% ## [----|----|----|----|----|----|----|----|----|----| ## **************************************************| ## 13:28:48 Writing NN index file to temp file /tmp/Rtmp9wYkrk/file126004ffc207f ## 13:28:48 Searching Annoy index using 1 thread, search_k = 3000 ## 13:28:58 Annoy recall = 100% ## 13:28:58 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 ## 13:29:02 Initializing from normalized Laplacian + noise (using RSpectra) ## 13:29:03 Commencing optimization for 200 epochs, with 1218032 positive edges ## 13:29:15 Optimization finished Let’s plot the UMAP embedding of the voxels colored by the cluster assignment. # UMAP plot plot1 = Seurat::DimPlot(ST011, reduction = &quot;umap&quot;, group.by = c(&quot;ident&quot;), label = TRUE) plot2 = Seurat::DimPlot(ST011, reduction = &quot;umap&quot;, group.by = c(&quot;orig.ident&quot;), cols = c(&quot;indianred&quot;, &quot;brown2&quot;, &quot;firebrick&quot;, &quot;#BCD2EE&quot;, &quot;lightskyblue3&quot;, &quot;dodgerblue&quot;), label = FALSE) patchwork::wrap_plots(plot1, plot2, ncol = 2) Figure 2.1: UMAP merged slides Indeed, cell groups 9, 10 and 11 seems enriched in the AD slides. There is also an evident separation between control and AD cells in groups 2 and 5. Let’s now overlay the Groups over the slides. # Visualize Layers Seurat::SpatialDimPlot(ST011, pt.size.factor = 2000, label = TRUE, label.size = 3, ncol = 3) Figure 2.2: Slides VS cell groups Let’s confirm that cell groups 9, 10 and 11 are indeed enriched in the AD slides by highlighting these cells over the slides. # group 9 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.3: Cell Group 9 distribution # group 10 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.4: Cell Group 10 distribution # group 11 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.5: Cell Group 11 distribution Wang et al. reports as most Differentially Expressed genes in AD vs control for these slides MTRNR2L1, MTRNR2L6, SERPINA3 and DEPP1. Let’s see the expression of these genes across the slides. # MTRNR2L1 and MTRNR2L6 expression Seurat::SpatialFeaturePlot(ST011, features = c(&quot;MTRNR2L1&quot;, &quot;MTRNR2L6&quot;), pt.size.factor = 2000) Figure 2.6: MTRNR2L1 and MTRNR2L6 expression # DEPP1 and SERPINA3 expression Seurat::SpatialFeaturePlot(ST011, features = c(&quot;DEPP1&quot;, &quot;SERPINA3&quot;), pt.size.factor = 2000) Figure 2.7: DEPP1 and SERPINA3 expression 2.2 Identification of Spatially Variable Genes across groups We can also compute the most spatially variable genes across the slides using the FindMarkers function in Seurat. We can choose cell groups 2 and group 11 to see which markers are more differentially expressed across these two groups. ## Found 6 SCT models. Recorrecting SCT counts using minimum median counts: 6489 ## used (Mb) gc trigger (Mb) max used (Mb) ## Ncells 8304990 443.6 12129994 647.9 12129994 647.9 ## Vcells 1493117220 11391.6 2618080851 19974.4 2616140296 19959.6 Let’s plot the top 3 markers identified p1 = Seurat::SpatialFeaturePlot( ST011, features = rownames(de_markers)[1:3], alpha = c(0.1, 1), pt.size.factor = 2000, ncol = 6 ) p1 Figure 2.8: Top 3 spatially variable markers "],["load-and-prepare-the-allen-gtm-atlas.html", "Chapter 3 Load and Prepare the Allen GTM Atlas", " Chapter 3 Load and Prepare the Allen GTM Atlas The full Allen Brain Cell Atlas is an incredible resource, but it is so large that it is very challenging to use it on a laptop. I have tried to download and downsapled it to just 10% of the amount of cells it contains. I had to reserve ~300Gb of my harddrive as extra swap not to run out of RAM. In the end, the process was so cumbersome, that I had to recline to a more manageable asset. Well, to be fair the Atlas comes as an anndata file, and while istalling the right libraries in python I broke my hd5f libraries in R, so I could not transform anndata to Seurat after downsampling, and so I have looked for a Seurat-compatible colution :/. I have retrieve the MTG reference from the Allen Brain Cell Atlas from the Seattle Alzheimer’s Disease Brain Cell Atlas (SEA-AD). The Seurat object provided is much more maneageable (~4.4 Gb) and it contains targeted information to annotate our slides. Let’s import the Atlas and run some dimensionality reduction on it, since the UMAP is available but not the PCA. The clustering process identifies 127 communities, of them 90 are flagged as singletons resulting in 37 final cell clusters. Let’s check the Atlas content. allen_MTG_reference ## An object of class Seurat ## 59236 features across 888263 samples within 1 assay ## Active assay: RNA (59236 features, 2000 variable features) ## 2 layers present: data, scale.data ## 3 dimensional reductions calculated: UMAP, tSNE, pca We can also plot number of cells per Region of Interest and for each cell type. # visualize Atlas frequencies breakdown p1 = ggplot(as.data.frame(t(table(allen_MTG_reference$ROIGroupFine))), aes(x = Var2, y = Freq)) + geom_bar(aes(fill = Var2), color = &quot;grey35&quot;, stat = &quot;identity&quot;) + geom_text(aes(label = Freq), size = 8, hjust = 1.1) + scale_fill_manual(values = c(brewer.pal(8, &quot;Set2&quot;), brewer.pal(8, &quot;Dark2&quot;))) + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + labs(title = &quot;Region&quot;, y = &quot;Number of cells&quot;) + coord_flip() + theme(plot.title = element_text(size = 24, hjust = 0.5), axis.title.x = element_text(size = 18), axis.title.y = element_blank(), axis.text = element_text(size = 14), panel.background = element_rect(fill = NA, colour = &quot;black&quot;), panel.grid.major.x = element_line(colour = &quot;grey&quot;), panel.grid.major.y = element_blank(), legend.position = &quot;none&quot;) p2 = ggplot(as.data.frame(t(table(allen_MTG_reference$cell_type))), aes(x = Var2, y = Freq)) + geom_bar(aes(fill = Var2), color = &quot;grey35&quot;, stat = &quot;identity&quot;) + geom_text(aes(label = Freq), size = 8, hjust = 1.1) + scale_fill_manual(values = c(brewer.pal(11, &quot;Set3&quot;))) + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + labs(title = &quot;Cell type&quot;, y = &quot;Number of cells&quot;) + coord_flip() + theme(plot.title = element_text(size = 24, hjust = 0.5), axis.title.x = element_text(size = 18), axis.title.y = element_blank(), axis.text = element_text(size = 14), panel.background = element_rect(fill = NA, colour = &quot;black&quot;), panel.grid.major.x = element_line(colour = &quot;grey&quot;), panel.grid.major.y = element_blank(), legend.position = &quot;none&quot;) patchwork::wrap_plots(p1, p2, ncol = 2) Figure 3.1: Number of cells per Region of Interest Let’s see how these regions and cell types are distributed in the UMAP space. # Visualize UMAPs of region and cell type of the Atlas p1 = Seurat::DimPlot(allen_MTG_reference, group.by = &quot;ROIGroupFine&quot;, label = FALSE, raster = FALSE) + scale_color_manual(values = c(brewer.pal(8, &quot;Set2&quot;), brewer.pal(8, &quot;Dark2&quot;))) p2 = Seurat::DimPlot(allen_MTG_reference, group.by = &quot;cell_type&quot;, label = FALSE, raster = FALSE) + scale_color_manual(values = c(brewer.pal(11, &quot;Set3&quot;))) patchwork::wrap_plots(p1, p2, ncol = 2) Figure 3.2: UMAP Allen MTG reference In the next chapter we will use the Allen MTG reference to annotate our slides and perform a spatial deconvolution to estimate the cell type composition of the Visium spots. "],["transfer-cell-annotations.html", "Chapter 4 Transfer cell annotations", " Chapter 4 Transfer cell annotations "],["transfer-cell-annotations-from-the-allen-mtg-reference-to-the-ad-slides..html", "Chapter 5 Transfer cell annotations from the Allen MTG reference to the AD slides.", " Chapter 5 Transfer cell annotations from the Allen MTG reference to the AD slides. First step is to identify and transfer gene anchors between the Allen MTG reference and the AD slides. "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
