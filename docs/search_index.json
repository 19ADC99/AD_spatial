[["index.html", "Alzhaimer’s disease - A gentle introduction to spatial transcriptomics Abstract", " Alzhaimer’s disease - A gentle introduction to spatial transcriptomics Andrea Del Cortona1 2024-08-15 Abstract Human middle temporal gyrus (MTG) is a vulnerable brain region in early Alzheimer’s disease (AD), but little is known about the molecular mechanisms underlying this regional vulnerability. Here we utilize the 10 × Visium platform to define the spatial transcriptomic profile in both AD and control (CT) MTG. We identify unique marker genes for cortical layers and the white matter, and layer-specific differentially expressed genes (DEGs) in human AD compared to CT. Deconvolution of the Visium spots showcases the significant difference in particular cell types among cortical layers and the white matter. Gene co-expression analyses reveal eight gene modules, four of which have significantly altered co-expression patterns in the presence of AD pathology. andrea.delcortona@gmail.com↩︎ "],["import-slides-exploration-and-merge.html", "Chapter 1 Import Slides, Exploration and Merge 1.1 Import the first Slide 1.2 Import all Slides and Merge", " Chapter 1 Import Slides, Exploration and Merge 1.1 Import the first Slide The study by Chen et al. 2022 provides a dataset of spatial transcriptomics data from the human middle temporal gyrus (MTG), an area vulnerable to Alzhaimer’s Disease. The study contains six slides, 3 from AD patients and 3 from healthy controls. The slides have been sequenced using 10X Genomics Visium technology and the raw data is available at the GEO accession number GSE220442. We have decided to retrieve the data from the ssREAD database. We will first import one slide to explore its content. ST01101 = qs::qread(&quot;/home/andrea/Dump/AD_spatial/ST011/ST01101.qsave&quot;) Let’s check the content ST01101 ## An object of class Seurat ## 36601 features across 4701 samples within 1 assay ## Active assay: Spatial (36601 features, 2000 variable features) ## 3 layers present: counts, data, scale.data ## 2 dimensional reductions calculated: pca, umap ## 1 image present: slice1 Very well, we have an object of class Seurat containing the spatial transcriptomics data of the first slide. The object contains expression data from 36,601 genes across 4701 spots. Let’s plot the expression of the genes next to the gene counts for each voxel in the slide. plot1 = Seurat::VlnPlot(ST01101, features = c(&quot;nCount_Spatial&quot;)) + NoLegend() plot2 = Seurat::SpatialFeaturePlot(ST01101, features = &quot;nCount_Spatial&quot;, pt.size.factor = 0) plot3 = Seurat::SpatialFeaturePlot(ST01101, features = &quot;nCount_Spatial&quot;, pt.size.factor = 2000) patchwork::wrap_plots(plot1, patchwork::wrap_plots(plot2, plot3, ncol = 1), ncol = 2) Figure 1.1: Slide ST01101 overview 1.2 Import all Slides and Merge Now that we are familiar with the content of the first slide, let’s import them in batch and merge them into a single Seurat object. First, we import the slides into the list ST011_list. Each slide is also transfermed using the Seurat::SCTransform function. Since the images attached to each sample have all the same name, we also make sure that we change the orig.ident of each slide so that the images are not overwritten when we merge the slides together. slides_names = data.frame( slide = c(&quot;ST01101&quot;, &quot;ST01102&quot;, &quot;ST01103&quot;, &quot;ST01104&quot;, &quot;ST01105&quot;, &quot;ST01106&quot;), slide_name = c(&quot;control1&quot;, &quot;control2&quot;, &quot;control3&quot;, &quot;AD1&quot;, &quot;AD2&quot;, &quot;AD3&quot;) ) # load slides data ST011_list = list() for(k in 1:6){ # get name slide_name = slides_names$slide[k] slide_type = slides_names$slide_name[k] ST011_list[[slide_type]] = qs::qread(paste0(&quot;/home/andrea/Dump/AD_spatial/ST011/ST0110&quot;, k, &quot;.qsave&quot;)) ST011_list[[slide_type]]$orig.ident = slide_type # expression normalization ST011_list[[slide_type]] = Seurat::SCTransform(ST011_list[[slide_type]], assay = &quot;Spatial&quot;, verbose = TRUE) gc() } Then, we merge the slides into a single Seurat object ST011 and set the variable features to the union of the variable features of the individual slides. # merge ST011 = merge(x = ST011_list[[1]], y = ST011_list[2:length(ST011_list)]) Seurat::VariableFeatures(ST011) = c( Seurat::VariableFeatures(ST011_list[[1]]), Seurat::VariableFeatures(ST011_list[[2]]), Seurat::VariableFeatures(ST011_list[[3]]), Seurat::VariableFeatures(ST011_list[[4]]), Seurat::VariableFeatures(ST011_list[[5]]), Seurat::VariableFeatures(ST011_list[[6]]) ) names(ST011@images) = slides_names$slide_name gc() ST011 ## An object of class Seurat ## 59009 features across 25293 samples within 2 assays ## Active assay: SCT (22408 features, 18000 variable features) ## 3 layers present: counts, data, scale.data ## 1 other assay present: Spatial ## 2 dimensional reductions calculated: pca, umap ## 6 images present: control1, control2, control3, AD1, AD2, AD3 We can now plot the expression across clusters splitted by slide. # expression QC Seurat::VlnPlot(ST011, features = c(&quot;nCount_Spatial&quot;), split.by = &quot;orig.ident&quot;) + scale_fill_manual(values = c(&quot;indianred&quot;, &quot;brown2&quot;, &quot;firebrick&quot;, &quot;#BCD2EE&quot;, &quot;lightskyblue3&quot;, &quot;dodgerblue&quot;)) + ggplot2::theme(legend.position = c(0.9, 0.9)) Figure 1.2: Merged slides overview - Violin Plot We can immediatly notice how the control group have an higher cell counts and expression values for group 2 and 5, while the AD slides seems encriched in cells from group 9. Group 11 appear only in an AD slide. Let’s check as well how the gene counts are distributed across the six slides. # expression QC plot1 = Seurat::SpatialFeaturePlot(ST011, features = &quot;nCount_Spatial&quot;, pt.size.factor = 0) plot2 = Seurat::SpatialFeaturePlot(ST011, features = &quot;nCount_Spatial&quot;, pt.size.factor = 2000) patchwork::wrap_plots(plot1, plot2, ncol = 1) Figure 1.3: Merged slides overview - Slides expression Now we have a single Seurat object ST011 containing all the slides. We can proceed with the Dimensionality Reduction steps. "],["dimensionality-reduction-and-exploration-of-the-merged-slides.html", "Chapter 2 Dimensionality Reduction and Exploration of the Merged Slides 2.1 Dimensionality Reduction 2.2 Identification of Spatially Variable Genes across groups", " Chapter 2 Dimensionality Reduction and Exploration of the Merged Slides 2.1 Dimensionality Reduction Let’s run PCA and UMAP on the merged slides to explore the data structure and relationships between the mapped voxels. ST011 = Seurat::RunPCA(ST011, verbose = TRUE) ST011 = Seurat::FindNeighbors(ST011, dims = 1:30) ST011 = Seurat::FindClusters(ST011, verbose = TRUE) ST011 = Seurat::RunUMAP(ST011, dims = 1:30) Let’s plot the UMAP embedding of the voxels colored by the cluster assignment. # UMAP plot plot1 = Seurat::DimPlot(ST011, reduction = &quot;umap&quot;, group.by = c(&quot;ident&quot;), label = TRUE) plot2 = Seurat::DimPlot(ST011, reduction = &quot;umap&quot;, group.by = c(&quot;orig.ident&quot;), cols = c(&quot;indianred&quot;, &quot;brown2&quot;, &quot;firebrick&quot;, &quot;#BCD2EE&quot;, &quot;lightskyblue3&quot;, &quot;dodgerblue&quot;), label = FALSE) patchwork::wrap_plots(plot1, plot2, ncol = 2) Figure 2.1: UMAP merged slides Indeed, cell groups 9, 10 and 11 seems enriched in the AD slides. There is also an evident separation between control and AD cells in groups 2 and 5. Let’s now overlay the Groups over the slides. # Visualize Layers Seurat::SpatialDimPlot(ST011, pt.size.factor = 2000, label = TRUE, label.size = 3, ncol = 3) Figure 2.2: Slides VS cell groups Let’s confirm that cell groups 9, 10 and 11 are indeed enriched in the AD slides by highlighting these cells over the slides. # group 9 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 9), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.3: Cell Group 9 distribution # group 10 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 10), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.4: Cell Group 10 distribution # group 11 p1 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[1], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p2 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[2], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p3 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[3], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p4 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[4], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p5 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[5], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() p6 = Seurat::SpatialDimPlot(ST011, images = names(ST011@images)[6], cells.highlight = CellsByIdentities(object = ST011, idents = 11), pt.size.factor = 2000) + NoLegend() patchwork::wrap_plots(p1, p2, p3, p4, p5, p6, ncol = 3) Figure 2.5: Cell Group 11 distribution Wang et al. reports as most Differentially Expressed genes in AD vs control for these slides MTRNR2L1, MTRNR2L6, SERPINA3 and DEPP1. Let’s see the expression of these genes across the slides. # MTRNR2L1 and MTRNR2L6 expression Seurat::SpatialFeaturePlot(ST011, features = c(&quot;MTRNR2L1&quot;, &quot;MTRNR2L6&quot;), pt.size.factor = 2000) Figure 2.6: MTRNR2L1 and MTRNR2L6 expression # DEPP1 and SERPINA3 expression Seurat::SpatialFeaturePlot(ST011, features = c(&quot;DEPP1&quot;, &quot;SERPINA3&quot;), pt.size.factor = 2000) Figure 2.7: DEPP1 and SERPINA3 expression 2.2 Identification of Spatially Variable Genes across groups We can also compute the most spatially variable genes across the slides using the FindMarkers function in Seurat. We can choose cell groups 2 and group 11 to see which markers are more differentially expressed across these two groups. ST011 = Seurat::PrepSCTFindMarkers(ST011) gc() Let’s plot the top 3 markers identified de_markers = Seurat::FindMarkers(ST011, ident.1 = 2, ident.2 = 11) p1 = Seurat::SpatialFeaturePlot( ST011, features = rownames(de_markers)[1:3], alpha = c(0.1, 1), pt.size.factor = 2000, ncol = 6 ) p1 Figure 2.8: Top 3 spatially variable markers "],["load-and-prepare-the-allen-gtm-atlas.html", "Chapter 3 Load and Prepare the Allen GTM Atlas", " Chapter 3 Load and Prepare the Allen GTM Atlas The full Allen Brain Cell Atlas is an incredible resource, but it is so large that it is very challenging to use it on a laptop. I have tried to download and downsapled it to just 10% of the amount of cells it contains. I had to reserve ~300Gb of my harddrive as extra swap not to run out of RAM. In the end, the process was so cumbersome, that I had to recline to a more manageable asset. Well, to be fair the Atlas comes as an anndata file, and while istalling the right libraries in python I broke my hd5f libraries in R, so I could not transform anndata to Seurat after downsampling, and so I have looked for a Seurat-compatible colution :/. I have retrieve the MTG reference from the Allen Brain Cell Atlas from the Seattle Alzheimer’s Disease Brain Cell Atlas (SEA-AD). The Seurat object provided is much more maneageable (~4.4 Gb) and it contains targeted information to annotate our slides. Let’s import the Atlas. # import allen_MTG_reference = qs::qread(&quot;/home/andrea/Dump/AD_spatial/allen_MTG_reference.qsave&quot;, nthreads = 4) Let’s check the Atlas content. allen_MTG_reference ## An object of class Seurat ## 59236 features across 888263 samples within 1 assay ## Active assay: RNA (59236 features, 0 variable features) ## 1 layer present: data ## 2 dimensional reductions calculated: UMAP, tSNE We run some dimensionality reduction on it, since the UMAP is available but not the PCA. # it comes without PCA, so we run it allen_MTG_reference = Seurat::FindVariableFeatures(allen_MTG_reference, selection.method = &quot;vst&quot;, nfeatures = 2000) allen_MTG_reference = Seurat::ScaleData(allen_MTG_reference) allen_MTG_reference = Seurat::RunPCA(allen_MTG_reference, verbose = TRUE) allen_MTG_reference = Seurat::FindNeighbors(allen_MTG_reference, dims = 1:30) allen_MTG_reference = Seurat::FindClusters(allen_MTG_reference, verbose = TRUE) The clustering process identifies 127 communities, of them 90 are flagged as singletons resulting in 37 final cell clusters. We can also plot number of cells per Region of Interest and for each cell type. # visualize Atlas frequencies breakdown p1 = ggplot(as.data.frame(t(table(allen_MTG_reference$ROIGroupFine))), aes(x = Var2, y = Freq)) + geom_bar(aes(fill = Var2), color = &quot;grey35&quot;, stat = &quot;identity&quot;) + geom_text(aes(label = Freq), size = 8, hjust = 1.1) + scale_fill_manual(values = c(brewer.pal(8, &quot;Set2&quot;), brewer.pal(8, &quot;Dark2&quot;))) + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + labs(title = &quot;Region&quot;, y = &quot;Number of cells&quot;) + coord_flip() + theme(plot.title = element_text(size = 24, hjust = 0.5), axis.title.x = element_text(size = 18), axis.title.y = element_blank(), axis.text = element_text(size = 14), panel.background = element_rect(fill = NA, colour = &quot;black&quot;), panel.grid.major.x = element_line(colour = &quot;grey&quot;), panel.grid.major.y = element_blank(), legend.position = &quot;none&quot;) p2 = ggplot(as.data.frame(t(table(allen_MTG_reference$cell_type))), aes(x = Var2, y = Freq)) + geom_bar(aes(fill = Var2), color = &quot;grey35&quot;, stat = &quot;identity&quot;) + geom_text(aes(label = Freq), size = 8, hjust = 1.1) + scale_fill_manual(values = c(brewer.pal(11, &quot;Set3&quot;))) + scale_y_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + labs(title = &quot;Cell type&quot;, y = &quot;Number of cells&quot;) + coord_flip() + theme(plot.title = element_text(size = 24, hjust = 0.5), axis.title.x = element_text(size = 18), axis.title.y = element_blank(), axis.text = element_text(size = 14), panel.background = element_rect(fill = NA, colour = &quot;black&quot;), panel.grid.major.x = element_line(colour = &quot;grey&quot;), panel.grid.major.y = element_blank(), legend.position = &quot;none&quot;) patchwork::wrap_plots(p1, p2, ncol = 1) Figure 3.1: Number of cells per Region of Interest Let’s see how these regions and cell types are distributed in the UMAP space. # Visualize UMAPs of region and cell type of the Atlas p1 = Seurat::DimPlot(allen_MTG_reference, group.by = &quot;ROIGroupFine&quot;, label = FALSE, raster = FALSE) + scale_color_manual(values = c(brewer.pal(8, &quot;Set2&quot;), brewer.pal(8, &quot;Dark2&quot;))) p2 = Seurat::DimPlot(allen_MTG_reference, group.by = &quot;cell_type&quot;, label = FALSE, raster = FALSE) + scale_color_manual(values = c(brewer.pal(11, &quot;Set3&quot;))) patchwork::wrap_plots(p1, p2, ncol = 1) Figure 3.2: UMAP Allen MTG reference In the next chapter we will use the Allen MTG reference to annotate our slides and perform a spatial deconvolution to estimate the cell type composition of the Visium spots. "],["transfer-cell-annotations.html", "Chapter 4 Transfer cell annotations 4.1 Transfer cell annotations from the Allen MTG reference to the AD slides.", " Chapter 4 Transfer cell annotations 4.1 Transfer cell annotations from the Allen MTG reference to the AD slides. First step is to identify and transfer gene anchors between the Allen MTG reference and the AD slides. We need to add SCT normalization to the Allen MTG reference, and then find the anchors. Since SCTransform requires the counts slot to be filled, we need to copy the data slot to the counts slot. Let’s as well downlsample the Allen MTG reference to 10% of the cells, to speed up the process and go easy on the RAM consumption. allen_MTG_reference = scMiko::downsampleSeurat(allen_MTG_reference, subsample.factor = 0.1) allen_MTG_reference[[&quot;RNA&quot;]]$counts = allen_MTG_reference[[&quot;RNA&quot;]]$data allen_MTG_reference = Seurat::SCTransform(allen_MTG_reference, verbose = TRUE) gc() # convert ENSEMBL to Symbols in Allen MTG reference library(&quot;org.Hs.eg.db&quot;) gene_list = AnnotationDbi::mapIds( org.Hs.eg.db, keys = rownames(allen_MTG_reference[[&quot;RNA&quot;]]$counts), keytype = &quot;ENSEMBL&quot;, column = &quot;SYMBOL&quot;, multiVals = &quot;first&quot; ) allen_MTG_reference = scMiko::ens2sym.so(allen_MTG_reference, gene_list) # drop NAs gene_list = gene_list[!is.na(gene_list)] allen_MTG_reference = subset(allen_MTG_reference, features = gene_list) # fix rownames in the meta.features slot rownames(allen_MTG_reference[[&quot;SCT&quot;]]@meta.features) = rownames(allen_MTG_reference[[&quot;SCT&quot;]]@data) Now that we have reformatted the Allen MTG reference, we finally proceed with the transfer of cell annotations. # get anchors anchors = Seurat::FindTransferAnchors( reference = allen_MTG_reference, query = ST011, normalization.method = &quot;SCT&quot;, recompute.residuals = FALSE ) # transfer cell_type annotations to ST011 slides predictions_assay = Seurat::TransferData( anchorset = anchors, refdata = allen_MTG_reference$cell_type, prediction.assay = TRUE, weight.reduction = ST011[[&quot;pca&quot;]], dims = 1:30 ) # add predictions to ST011 as a new slot ST011[[&quot;predictions&quot;]] = predictions_assay Seurat::DefaultAssay(ST011) = &quot;predictions&quot; # add predictions to the metadata predictions_id = Seurat::TransferData( anchorset = anchors, refdata = allen_MTG_reference$cell_type, prediction.assay = FALSE, weight.reduction = ST011[[&quot;pca&quot;]], dims = 1:30 ) ST011$predicted_id = predictions_id$predicted_id ST011[[]]$predicted_id = predictions_id$predicted_id Let’s now check the voxels predicted to contains astrocytes, oligodendrocytes and fibroblasts in the AD slides compared to the control slides. SpatialFeaturePlot( ST011, features = &quot;astrocyte&quot;, pt.size.factor = 1500, ncol = 3, crop = TRUE ) Figure 4.1: Predicted astrocytes SpatialFeaturePlot( ST011, features = &quot;oligodendrocyte&quot;, pt.size.factor = 1500, ncol = 3, crop = TRUE ) Figure 4.2: Predicted oligodendrocytes SpatialFeaturePlot( ST011, features = &quot;fibroblast&quot;, pt.size.factor = 1500, ncol = 3, crop = TRUE ) Figure 4.3: Predicted fibrolasts We can notice a decrease of astrocytes and and increase in fibroblasts in the AD slides when compared to the control slides. "],["differential-gene-expression-analysis.html", "Chapter 5 Differential gene expression analysis 5.1 Differential gene expression analysis", " Chapter 5 Differential gene expression analysis 5.1 Differential gene expression analysis Let’s now focus on identitying markers that can distinguish the different cell types in the dataset. Let’s use the function FindAllMarkers. # must switch back to SCT to identify variable markers Seurat::DefaultAssay(ST011) = &quot;SCT&quot; # find markers all_markers = Seurat::FindAllMarkers( ST011, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25 ) Let’s check the top markers for each identified. all_markers %&gt;% group_by(cluster) %&gt;% dplyr::filter(avg_log2FC &gt; 1) ## # A tibble: 961 × 7 ## # Groups: cluster [12] ## p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; ## 1 0 1.62 0.75 0.409 0 0 MT1F ## 2 0 1.65 0.878 0.624 0 0 MT1G ## 3 0 1.04 0.97 0.913 0 0 MT1E ## 4 3.14e-293 1.58 0.375 0.145 7.04e-289 0 WIF1 ## 5 1.99e-291 1.00 0.728 0.506 4.46e-287 0 ETNPPL ## 6 1.40e-286 1.12 0.592 0.325 3.14e-282 0 SLC14A1 ## 7 8.73e-276 1.14 0.57 0.311 1.96e-271 0 GJB6 ## 8 2.60e-234 1.49 0.334 0.135 5.82e-230 0 AL121820.2 ## 9 2.02e-190 1.00 0.509 0.298 4.52e-186 0 TNS3 ## 10 2.57e-115 1.08 0.276 0.138 5.76e-111 0 TBC1D16 ## # ℹ 951 more rows Let’s visualize the top 6 in a UMAP plot. Seurat::FeaturePlot(ST011, features = c(&quot;MT1F&quot;, &quot;MT1G&quot;, &quot;MT1E&quot;, &quot;WIF1&quot;, &quot;ETNPPL&quot;, &quot;SLC14A1&quot;)) Figure 5.1: Top 6 markers Let’s visualize the top 10 markers that differentiate between clusters with a heatmap. # get the genes top10_genes = all_markers %&gt;% group_by(cluster) %&gt;% dplyr::filter(avg_log2FC &gt; 1) %&gt;% slice_head(n = 10) %&gt;% ungroup() # plot p1 = Seurat::DoHeatmap(ST011, features = top10_genes$gene) + NoLegend() p1 Figure 5.2: Top markers heatmap We can also check the distribution of the top 10 markers across the different samples and groups. Seurat::DotPlot( ST011, features = unique(top10_genes$gene), split.by = &quot;orig.ident&quot;, cols = c(&quot;indianred&quot;, &quot;brown2&quot;, &quot;firebrick&quot;, &quot;#BCD2EE&quot;, &quot;lightskyblue3&quot;, &quot;dodgerblue&quot;) ) + RotatedAxis() Figure 5.3: Dotplot top markers per sample Seurat::DotPlot( ST011, features = unique(top10_genes$gene), split.by = &quot;seurat_clusters&quot;, cols = c(brewer.pal(8, &quot;Set2&quot;), brewer.pal(8, &quot;Dark2&quot;)) ) + RotatedAxis() Figure 5.4: Dotplot top markers per cluster "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
